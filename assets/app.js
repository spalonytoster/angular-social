var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope","$http","UserSvc",function(o,e,t){o.$on("login",function(e,t){o.currentUser=t}),o.logout=function(){t.logout(),delete o.currentUser,delete window.localStorage.token},window.localStorage.token&&(console.log(window.localStorage.token),e.defaults.headers.common["X-auth"]=window.localStorage.token,t.getUser().success(function(e){console.log(e),o.currentUser=e}))}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(o,e){o.login=function(t,n,r){console.log(r),e.login(t,n,r).then(function(e){o.$emit("login",e.data)})}}]),app.controller("PostsCtrl",["$scope","PostsSvc",function(o,e){o.addPost=function(){o.postBody&&e.create({body:o.postBody}).success(function(e){o.postBody=null})},e.fetch().success(function(e){o.posts=e}),o.$on("ws:new_post",function(e,t){console.log(t),o.posts.unshift(t)})}]),app.service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(e){return o.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(o,e){o.register=function(o,t){e.createUser(o,t).then(function(o){201===o.status?console.log("registration successful"):console.log("registration unsuccessful")})}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(o,e){e.html5Mode(!0),o.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(o){var e=this;e.getUser=function(){return o.get("/api/users")},e.login=function(t,n,r){return o.post("/api/sessions",{username:t,password:n}).then(function(t){return r&&(console.log("rememberMe - userSvc"),window.localStorage.token=t.data,console.log("token from localStorage: "+window.localStorage.token)),o.defaults.headers.common["X-auth"]=t.data,e.getUser()})},e.logout=function(){delete o.defaults.headers.common["X-auth"]},e.createUser=function(e,t){return o.post("/api/users",{username:e,password:t})}}]),angular.module("app").run(["$rootScope",function(o){var e="ws://"+window.location.host,t=new WebSocket(e);t.onopen=function(){console.log("Nawiązano połączenie z WebSocket.")},t.onmessage=function(e){var t=JSON.parse(e.data);o.$broadcast("ws:"+t.topic,t.data)}}]);
//# sourceMappingURL=data:application/json;base64,
