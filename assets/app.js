var app=angular.module("app",["ngRoute"]);angular.module("app").controller("ApplicationCtrl",["$scope","UserSvc",function(t,e){t.$on("login",function(e,o){t.currentUser=o}),t.logout=function(){e.logout(),delete t.currentUser}}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(o,n){e.login(o,n).then(function(e){t.$emit("login",e.data)})}}]),app.controller("PostsCtrl",["$scope","PostsSvc",function(t,e){t.addPost=function(){t.postBody&&e.create({body:t.postBody}).success(function(e){t.posts.unshift(e),t.postBody=null})},e.fetch().success(function(e){t.posts=e})}]),app.service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(t,o){e.createUser(t,o).then(function(t){201===t.status?console.log("registration successful"):console.log("registration unsuccessful")})}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){e.html5Mode(!0),t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users")},e.login=function(o,n){return t.post("/api/sessions",{username:o,password:n}).then(function(o){return e.token=o.data,t.defaults.headers.common["X-auth"]=o.data,e.getUser()})},e.logout=function(){delete t.defaults.headers.common["X-auth"]},e.createUser=function(e,o){return t.post("/api/users",{username:e,password:o})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnN2Yy5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIlVzZXJTdmMiLCIkb24iLCJfIiwidXNlciIsImN1cnJlbnRVc2VyIiwibG9nb3V0IiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiUG9zdHNTdmMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsInBvc3QiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNyZWF0ZVVzZXIiLCJzdGF0dXMiLCJjb25zb2xlIiwibG9nIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsImh0bWw1TW9kZSIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsInN2YyIsImdldFVzZXIiLCJ2YWwiLCJ0b2tlbiIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBQUEsS0FBQUMsUUFBQUMsT0FBQSxPQUNBLFdDREFELFNBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUMsR0FDQUQsRUFBQUUsSUFBQSxRQUFBLFNBQUFDLEVBQUFDLEdBQ0FKLEVBQUFLLFlBQUFELElBRUFKLEVBQUFNLE9BQUEsV0FDQUwsRUFBQUssZUFDQU4sR0FBQUssZ0JDUEFSLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsVUFBQSxTQUFBQyxFQUFBQyxHQUNBRCxFQUFBTyxNQUFBLFNBQUFDLEVBQUFDLEdBQ0FSLEVBQUFNLE1BQUFDLEVBQUFDLEdBQ0FDLEtBQUEsU0FBQUMsR0FDQVgsRUFBQVksTUFBQSxRQUFBRCxFQUFBRSxZQ0xBakIsSUFBQUcsV0FBQSxhQUFBLFNBQUEsV0FBQSxTQUFBQyxFQUFBYyxHQUNBZCxFQUFBZSxRQUFBLFdBQ0FmLEVBQUFnQixVQUNBRixFQUFBRyxRQUNBQyxLQUFBbEIsRUFBQWdCLFdBRUFHLFFBQUEsU0FBQUMsR0FDQXBCLEVBQUFxQixNQUFBQyxRQUFBRixHQUNBcEIsRUFBQWdCLFNBQUEsUUFJQUYsRUFBQVMsUUFBQUosUUFBQSxTQUFBRSxHQUNBckIsRUFBQXFCLE1BQUFBLE9DYkF6QixJQUFBNEIsUUFBQSxZQUFBLFFBQUEsU0FBQUMsR0FDQUMsS0FBQUgsTUFBQSxXQUNBLE1BQUFFLEdBQUFFLElBQUEsZUFFQUQsS0FBQVQsT0FBQSxTQUFBRyxHQUNBLE1BQUFLLEdBQUFMLEtBQUEsYUFBQUEsT0NMQXZCLFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxnQkFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUMsR0FDQUQsRUFBQTRCLFNBQUEsU0FBQXBCLEVBQUFDLEdBQ0FSLEVBQUE0QixXQUFBckIsRUFBQUMsR0FDQUMsS0FBQSxTQUFBQyxHQUNBLE1BQUFBLEVBQUFtQixPQUtBQyxRQUFBQyxJQUFBLDJCQUdBRCxRQUFBQyxJQUFBLG1DQ2JBbkMsUUFBQUMsT0FBQSxPQUNBbUMsUUFBQSxpQkFBQSxvQkFBQSxTQUFBQyxFQUFBQyxHQUNBQSxFQUFBQyxXQUFBLEdBQ0FGLEVBQ0FHLEtBQUEsS0FBQXRDLFdBQUEsWUFBQXVDLFlBQUEsZUFDQUQsS0FBQSxhQUFBdEMsV0FBQSxlQUFBdUMsWUFBQSxrQkFDQUQsS0FBQSxVQUFBdEMsV0FBQSxZQUFBdUMsWUFBQSxrQkNOQXpDLFFBQUFDLE9BQUEsT0FDQTBCLFFBQUEsV0FBQSxRQUFBLFNBQUFDLEdBQ0EsR0FBQWMsR0FBQWIsSUFFQWEsR0FBQUMsUUFBQSxXQUNBLE1BQUFmLEdBQUFFLElBQUEsZUFFQVksRUFBQWhDLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBZ0IsR0FBQUwsS0FBQSxpQkFDQVosU0FBQUEsRUFDQUMsU0FBQUEsSUFFQUMsS0FBQSxTQUFBK0IsR0FHQSxNQUZBRixHQUFBRyxNQUFBRCxFQUFBNUIsS0FDQVksRUFBQWtCLFNBQUFDLFFBQUFDLE9BQUEsVUFBQUosRUFBQTVCLEtBQ0EwQixFQUFBQyxhQUdBRCxFQUFBakMsT0FBQSxpQkFDQW1CLEdBQUFrQixTQUFBQyxRQUFBQyxPQUFBLFdBRUFOLEVBQUFWLFdBQUEsU0FBQXJCLEVBQUFDLEdBQ0EsTUFBQWdCLEdBQUFMLEtBQUEsY0FDQVosU0FBQUEsRUFDQUMsU0FBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgJ25nUm91dGUnXHJcbl0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUsIFVzZXJTdmMpIHtcclxuICAkc2NvcGUuJG9uKCdsb2dpbicsIGZ1bmN0aW9uIChfLCB1c2VyKSB7XHJcbiAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gIH0pO1xyXG4gICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBVc2VyU3ZjLmxvZ291dCgpO1xyXG4gICAgZGVsZXRlICRzY29wZS5jdXJyZW50VXNlcjtcclxuICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XHJcbiAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgVXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKTtcclxuICAgICAgfSk7XHJcbiAgfTtcclxufSk7XHJcbiIsImFwcC5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBQb3N0c1N2Yykge1xyXG4gICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKCRzY29wZS5wb3N0Qm9keSkge1xyXG4gICAgICBQb3N0c1N2Yy5jcmVhdGUoe1xyXG4gICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxyXG4gICAgICB9KVxyXG4gICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocG9zdCkge1xyXG4gICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpO1xyXG4gICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGw7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgUG9zdHNTdmMuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0cykge1xyXG4gICAgJHNjb3BlLnBvc3RzID0gcG9zdHM7XHJcbiAgfSk7XHJcbn0pO1xyXG4iLCJhcHAuc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbiAoJGh0dHApIHtcclxuICB0aGlzLmZldGNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpO1xyXG4gIH07XHJcbiAgdGhpcy5jcmVhdGUgPSBmdW5jdGlvbiAocG9zdCkge1xyXG4gICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLCBwb3N0KTtcclxuICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb250cm9sbGVyKCdSZWdpc3RlckN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XHJcbiAgJHNjb3BlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgVXNlclN2Yy5jcmVhdGVVc2VyKHVzZXJuYW1lLCBwYXNzd29yZClcclxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAxKSB7XHJcbiAgICAgICAgICAvLyBVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcclxuICAgICAgICAgIC8vIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgLy8gICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSk7XHJcbiAgICAgICAgICAvLyB9KTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWdpc3RyYXRpb24gc3VjY2Vzc2Z1bCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWdpc3RyYXRpb24gdW5zdWNjZXNzZnVsJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9O1xyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHJcbi5jb25maWcoZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xyXG4gICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcclxuICAkcm91dGVQcm92aWRlclxyXG4gICAgLndoZW4oJy8nLCB7IGNvbnRyb2xsZXI6ICdQb3N0c0N0cmwnLCB0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnfSlcclxuICAgIC53aGVuKCcvcmVnaXN0ZXInLCB7IGNvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnLCB0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnfSlcclxuICAgIC53aGVuKCcvbG9naW4nLCB7IGNvbnRyb2xsZXI6ICdMb2dpbkN0cmwnLCB0ZW1wbGF0ZVVybDogJ2xvZ2luLmh0bWwnfSk7XHJcbn0pO1xyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbiAoJGh0dHApIHtcclxuICB2YXIgc3ZjID0gdGhpcztcclxuXHJcbiAgc3ZjLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJyk7XHJcbiAgfTtcclxuICBzdmMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcclxuICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxyXG4gICAgICBwYXNzd29yZDogcGFzc3dvcmRcclxuICAgIH0pXHJcbiAgICAudGhlbihmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgIHN2Yy50b2tlbiA9IHZhbC5kYXRhO1xyXG4gICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1hdXRoJ10gPSB2YWwuZGF0YTtcclxuICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG4gIHN2Yy5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBkZWxldGUgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtYXV0aCddO1xyXG4gIH07XHJcbiAgc3ZjLmNyZWF0ZVVzZXIgPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS91c2VycycsIHtcclxuICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxyXG4gICAgICBwYXNzd29yZDogcGFzc3dvcmRcclxuICAgIH0pO1xyXG4gIH07XHJcbn0pO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
